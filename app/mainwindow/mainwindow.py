import sys
from PySide6.QtCore import Qt
from PySide6.QtGui import QBrush, QColor
from PySide6.QtWidgets import QApplication, QMainWindow, QGridLayout, QWidget, QColorDialog, QListWidgetItem

from app.widgets.colordisplaywidget import ColorDisplayWidget
from app.mainwindow.ui_mainwindow import Ui_MainWindow
from app.widgets.settingsitemwidget import SettingItemWidget
from qtpop import QtPop
from qtpop.configuration.models import SettingItem


# generated by pyside6-uic


class MainWindow(QMainWindow):
    def __init__(self, qt_pop: QtPop):
        super().__init__()
        self.qt_pop = qt_pop
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setWindowTitle(self.qt_pop.config.get_value('name'))

        self.setup_palette()
        self.setup_settings()
        self.qt_pop.log.info("MainWindow initialized successfully.")
        self.qt_pop.data.broadcast_message("main_window_opened", True)

    def setup_palette(self):
        def load_palette():
            grid = QGridLayout()
            grid.setSpacing(5)
            grid.setContentsMargins(5, 5, 5, 5)
            columns = 4

            for i, (item, hex_val) in enumerate(self.qt_pop.style.colour_map().items()):
                row = i // columns
                col = i % columns
                grid.addWidget(ColorDisplayWidget(hex_val, item), row, col)

            old_layout = self.ui.p_frame.layout()
            if old_layout is not None:
                QWidget().setLayout(old_layout)

            self.ui.p_frame.setLayout(grid)
        load_palette()

    def setup_settings(self):
        for key, item in self.qt_pop.config.data.configuration.user.items():
            self.qt_pop.log.info(f"Loading setting {item.name}, value: {item.value}")
            custom_widget = SettingItemWidget(item)
            list_item = QListWidgetItem(self.ui.settingsLW)
            hint = custom_widget.sizeHint()
            hint.setHeight(hint.height() + 10)
            list_item.setSizeHint(hint)
            self.ui.settingsLW.addItem(list_item)
            self.ui.settingsLW.setItemWidget(list_item, custom_widget)

        for key, value in self.qt_pop.config.data.configuration.static.items():
            self.qt_pop.log.info(f"Loading setting {key}, value: {value}")
            item = SettingItem(key, value, [], "application static setting", "text", "user", "Static", "")
            custom_widget = SettingItemWidget(item)
            list_item = QListWidgetItem(self.ui.settingsLW)
            hint = custom_widget.sizeHint()
            hint.setHeight(hint.height() + 10)
            list_item.setSizeHint(hint)
            self.ui.settingsLW.addItem(list_item)
            self.ui.settingsLW.setItemWidget(list_item, custom_widget)
