import sys

from PySide6.QtCore import Qt
from PySide6.QtGui import QBrush, QColor
from PySide6.QtWidgets import QApplication, QMainWindow, QGridLayout, QWidget, QColorDialog

from app.helpers.paletteitem import ColorDisplayWidget
from app.mainwindow.ui_mainwindow import Ui_MainWindow
from qtpop import QtPop
 # generated by pyside6-uic


class MainWindow(QMainWindow):
    def __init__(self, qt_pop: QtPop):
        super().__init__()
        self.qt_pop = qt_pop
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setWindowTitle("My QtPop App")
        self.qt_pop.log.info("MainWindow initialized successfully.")
        self.qt_pop.data.broadcast_message("main_window_opened", True)

        self.setup_palette()


    def setup_palette(self):
        def load_controls():
            def on_combo_change(combo, index):
                self.qt_pop.log.info(f"Combo {combo.objectName()} changed to {combo.itemText(index)}")

            def add_colored_item(combo, hex_color):
                combo.addItem(hex_color)
                index = combo.findText(hex_color)
                if index >= 0:
                    combo.setItemData(index, QBrush(QColor(hex_color)), role=Qt.ItemDataRole.BackgroundRole)

            def on_button_click(button):
                color = QColorDialog.getColor()
                if not color.isValid():
                    return

                self.qt_pop.log.info(f"Button {button.objectName()} clicked, selected color: {color.name()}")

            combos = {
                "accent": self.ui.accent_combo,
                "support": self.ui.support_combo,
                "neutral": self.ui.neutral_combo,
                "theme": self.ui.theme_combo,
            }
            buttons = {
                "accent": self.ui.accent_pick,
                "support": self.ui.support_pick,
                "neutral": self.ui.neutral_pick,
            }

            accent = self.qt_pop.config.get_value('accent')
            support = self.qt_pop.config.get_value('support')
            neutral = self.qt_pop.config.get_value('neutral')
            theme = self.qt_pop.config.get_value('theme')

            for item in accent.values:
                add_colored_item(self.ui.accent_combo, item)

            for item in support.values:
                add_colored_item(self.ui.support_combo, item)

            for item in neutral.values:
                add_colored_item(self.ui.neutral_combo, item)

            for item in theme.values:
                self.ui.theme_combo.addItem(item)

            for combo in combos.values():
                combo.currentIndexChanged.connect(lambda index, c=combo: on_combo_change(c, index))

            # self.ui.accent_combo.currentIndexChanged.connect(lambda index, c=self.ui.accent_combo: on_combo_change(c, index))
            # self.ui.support_combo.currentIndexChanged.connect(
            #     lambda index, c=self.ui.support_combo: on_combo_change(c, index)
            # )
            # self.ui.neutral_combo.currentIndexChanged.connect(
            #     lambda index, c=self.ui.neutral_combo: on_combo_change(c, index)
            # )
            # self.ui.theme_combo.currentIndexChanged.connect(
            #     lambda index, c=self.ui.theme_combo: on_combo_change(c, index)
            # )

            for button in buttons.values():
                button.clicked.connect(lambda _, b=button: on_button_click(b))

        def load_palette():
            grid = QGridLayout()
            grid.setSpacing(5)
            grid.setContentsMargins(5, 5, 5, 5)
            columns = 4

            for i, (item, hex_val) in enumerate(self.qt_pop.style.colour_map().items()):
                row = i // columns
                col = i % columns
                grid.addWidget(ColorDisplayWidget(hex_val, item), row, col)

            old_layout = self.ui.palette_bottom_frame.layout()
            if old_layout is not None:
                QWidget().setLayout(old_layout)

            self.ui.palette_bottom_frame.setLayout(grid)

        load_controls()
        load_palette()



